"""autogenerated by genpy from core_communication_srvs/BeckhoffDevicesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BeckhoffDevicesRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "core_communication_srvs/BeckhoffDevicesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BeckhoffDevicesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from core_communication_srvs/BeckhoffDevicesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import core_communication_msgs.msg

class BeckhoffDevicesResponse(genpy.Message):
  _md5sum = "830b2a5efe896b0f1c78a87d9bd2d0af"
  _type = "core_communication_srvs/BeckhoffDevicesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 numTerminals
core_communication_msgs/BeckhoffTerminalDescription[] terminals


================================================================================
MSG: core_communication_msgs/BeckhoffTerminalDescription
string terminal # terminal type
uint32 position # relative position of the terminal in the EtherCAT bus (0-n)
uint8 num_ports # number of ports on the terminal (0-n)
BeckhoffPortDescription[] ports # port descriptions

================================================================================
MSG: core_communication_msgs/BeckhoffPortDescription
uint8 index
string direction # 'in','out'
string type # 'digital';'analog'
string data_type # 'uint8' 'uint16' 'uint32' 'uint64'

"""
  __slots__ = ['numTerminals','terminals']
  _slot_types = ['int32','core_communication_msgs/BeckhoffTerminalDescription[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       numTerminals,terminals

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BeckhoffDevicesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.numTerminals is None:
        self.numTerminals = 0
      if self.terminals is None:
        self.terminals = []
    else:
      self.numTerminals = 0
      self.terminals = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.numTerminals))
      length = len(self.terminals)
      buff.write(_struct_I.pack(length))
      for val1 in self.terminals:
        _x = val1.terminal
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IB.pack(_x.position, _x.num_ports))
        length = len(val1.ports)
        buff.write(_struct_I.pack(length))
        for val2 in val1.ports:
          buff.write(_struct_B.pack(val2.index))
          _x = val2.direction
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.data_type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.terminals is None:
        self.terminals = None
      end = 0
      start = end
      end += 4
      (self.numTerminals,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.terminals = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.BeckhoffTerminalDescription()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.terminal = str[start:end].decode('utf-8')
        else:
          val1.terminal = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.position, _x.num_ports,) = _struct_IB.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.ports = []
        for i in range(0, length):
          val2 = core_communication_msgs.msg.BeckhoffPortDescription()
          start = end
          end += 1
          (val2.index,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.direction = str[start:end].decode('utf-8')
          else:
            val2.direction = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data_type = str[start:end].decode('utf-8')
          else:
            val2.data_type = str[start:end]
          val1.ports.append(val2)
        self.terminals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.numTerminals))
      length = len(self.terminals)
      buff.write(_struct_I.pack(length))
      for val1 in self.terminals:
        _x = val1.terminal
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IB.pack(_x.position, _x.num_ports))
        length = len(val1.ports)
        buff.write(_struct_I.pack(length))
        for val2 in val1.ports:
          buff.write(_struct_B.pack(val2.index))
          _x = val2.direction
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.data_type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.terminals is None:
        self.terminals = None
      end = 0
      start = end
      end += 4
      (self.numTerminals,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.terminals = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.BeckhoffTerminalDescription()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.terminal = str[start:end].decode('utf-8')
        else:
          val1.terminal = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.position, _x.num_ports,) = _struct_IB.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.ports = []
        for i in range(0, length):
          val2 = core_communication_msgs.msg.BeckhoffPortDescription()
          start = end
          end += 1
          (val2.index,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.direction = str[start:end].decode('utf-8')
          else:
            val2.direction = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.type = str[start:end].decode('utf-8')
          else:
            val2.type = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data_type = str[start:end].decode('utf-8')
          else:
            val2.data_type = str[start:end]
          val1.ports.append(val2)
        self.terminals.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_B = struct.Struct("<B")
_struct_IB = struct.Struct("<IB")
class BeckhoffDevices(object):
  _type          = 'core_communication_srvs/BeckhoffDevices'
  _md5sum = '830b2a5efe896b0f1c78a87d9bd2d0af'
  _request_class  = BeckhoffDevicesRequest
  _response_class = BeckhoffDevicesResponse

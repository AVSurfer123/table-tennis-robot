"""autogenerated by genpy from core_communication_srvs/ControlLoopRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import core_communication_msgs.msg

class ControlLoopRequest(genpy.Message):
  _md5sum = "32a144e334eb9a8d3ceba5ce3909af2c"
  _type = "core_communication_srvs/ControlLoopRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool setControlLoop
core_communication_msgs/ControlLoop newControlLoop

================================================================================
MSG: core_communication_msgs/ControlLoop
string className
string baseClassName
string description
int64 referenceId

"""
  __slots__ = ['setControlLoop','newControlLoop']
  _slot_types = ['bool','core_communication_msgs/ControlLoop']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setControlLoop,newControlLoop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlLoopRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.setControlLoop is None:
        self.setControlLoop = False
      if self.newControlLoop is None:
        self.newControlLoop = core_communication_msgs.msg.ControlLoop()
    else:
      self.setControlLoop = False
      self.newControlLoop = core_communication_msgs.msg.ControlLoop()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.setControlLoop))
      _x = self.newControlLoop.className
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.newControlLoop.baseClassName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.newControlLoop.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_q.pack(self.newControlLoop.referenceId))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.newControlLoop is None:
        self.newControlLoop = core_communication_msgs.msg.ControlLoop()
      end = 0
      start = end
      end += 1
      (self.setControlLoop,) = _struct_B.unpack(str[start:end])
      self.setControlLoop = bool(self.setControlLoop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.newControlLoop.className = str[start:end].decode('utf-8')
      else:
        self.newControlLoop.className = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.newControlLoop.baseClassName = str[start:end].decode('utf-8')
      else:
        self.newControlLoop.baseClassName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.newControlLoop.description = str[start:end].decode('utf-8')
      else:
        self.newControlLoop.description = str[start:end]
      start = end
      end += 8
      (self.newControlLoop.referenceId,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.setControlLoop))
      _x = self.newControlLoop.className
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.newControlLoop.baseClassName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.newControlLoop.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_q.pack(self.newControlLoop.referenceId))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.newControlLoop is None:
        self.newControlLoop = core_communication_msgs.msg.ControlLoop()
      end = 0
      start = end
      end += 1
      (self.setControlLoop,) = _struct_B.unpack(str[start:end])
      self.setControlLoop = bool(self.setControlLoop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.newControlLoop.className = str[start:end].decode('utf-8')
      else:
        self.newControlLoop.className = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.newControlLoop.baseClassName = str[start:end].decode('utf-8')
      else:
        self.newControlLoop.baseClassName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.newControlLoop.description = str[start:end].decode('utf-8')
      else:
        self.newControlLoop.description = str[start:end]
      start = end
      end += 8
      (self.newControlLoop.referenceId,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from core_communication_srvs/ControlLoopResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import core_communication_msgs.msg

class ControlLoopResponse(genpy.Message):
  _md5sum = "047ea1a23e665c07d923b3d592375331"
  _type = "core_communication_srvs/ControlLoopResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
core_communication_msgs/ControlLoop[] controlLoops
core_communication_msgs/ControlLoop activeControlLoop


================================================================================
MSG: core_communication_msgs/ControlLoop
string className
string baseClassName
string description
int64 referenceId

"""
  __slots__ = ['controlLoops','activeControlLoop']
  _slot_types = ['core_communication_msgs/ControlLoop[]','core_communication_msgs/ControlLoop']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controlLoops,activeControlLoop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlLoopResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.controlLoops is None:
        self.controlLoops = []
      if self.activeControlLoop is None:
        self.activeControlLoop = core_communication_msgs.msg.ControlLoop()
    else:
      self.controlLoops = []
      self.activeControlLoop = core_communication_msgs.msg.ControlLoop()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.controlLoops)
      buff.write(_struct_I.pack(length))
      for val1 in self.controlLoops:
        _x = val1.className
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.baseClassName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_q.pack(val1.referenceId))
      _x = self.activeControlLoop.className
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.activeControlLoop.baseClassName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.activeControlLoop.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_q.pack(self.activeControlLoop.referenceId))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.controlLoops is None:
        self.controlLoops = None
      if self.activeControlLoop is None:
        self.activeControlLoop = core_communication_msgs.msg.ControlLoop()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controlLoops = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.ControlLoop()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.className = str[start:end].decode('utf-8')
        else:
          val1.className = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.baseClassName = str[start:end].decode('utf-8')
        else:
          val1.baseClassName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        start = end
        end += 8
        (val1.referenceId,) = _struct_q.unpack(str[start:end])
        self.controlLoops.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activeControlLoop.className = str[start:end].decode('utf-8')
      else:
        self.activeControlLoop.className = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activeControlLoop.baseClassName = str[start:end].decode('utf-8')
      else:
        self.activeControlLoop.baseClassName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activeControlLoop.description = str[start:end].decode('utf-8')
      else:
        self.activeControlLoop.description = str[start:end]
      start = end
      end += 8
      (self.activeControlLoop.referenceId,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.controlLoops)
      buff.write(_struct_I.pack(length))
      for val1 in self.controlLoops:
        _x = val1.className
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.baseClassName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_q.pack(val1.referenceId))
      _x = self.activeControlLoop.className
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.activeControlLoop.baseClassName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.activeControlLoop.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_q.pack(self.activeControlLoop.referenceId))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.controlLoops is None:
        self.controlLoops = None
      if self.activeControlLoop is None:
        self.activeControlLoop = core_communication_msgs.msg.ControlLoop()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controlLoops = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.ControlLoop()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.className = str[start:end].decode('utf-8')
        else:
          val1.className = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.baseClassName = str[start:end].decode('utf-8')
        else:
          val1.baseClassName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        start = end
        end += 8
        (val1.referenceId,) = _struct_q.unpack(str[start:end])
        self.controlLoops.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activeControlLoop.className = str[start:end].decode('utf-8')
      else:
        self.activeControlLoop.className = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activeControlLoop.baseClassName = str[start:end].decode('utf-8')
      else:
        self.activeControlLoop.baseClassName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.activeControlLoop.description = str[start:end].decode('utf-8')
      else:
        self.activeControlLoop.description = str[start:end]
      start = end
      end += 8
      (self.activeControlLoop.referenceId,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
class ControlLoop(object):
  _type          = 'core_communication_srvs/ControlLoop'
  _md5sum = '07980c17b05613bcf2464741e7a30038'
  _request_class  = ControlLoopRequest
  _response_class = ControlLoopResponse

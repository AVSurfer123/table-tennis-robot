"""autogenerated by genpy from core_communication_srvs/BasicTrajInfosRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BasicTrajInfosRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "core_communication_srvs/BasicTrajInfosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicTrajInfosRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from core_communication_srvs/BasicTrajInfosResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BasicTrajInfosResponse(genpy.Message):
  _md5sum = "4135fcce14a6de812c59d2a8b8b566a0"
  _type = "core_communication_srvs/BasicTrajInfosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64 cartReachingAccuracyFlyByPoint
float64 orientReachingAccuracyFlyByPoint
float64 cartReachingAccuracyStopPoint
float64 orientReachingAccuracyStopPoint
float64 jointReachingAccuracyStopPoint
float64 defaultEndeffectorVel
float64 defaultJointVel


"""
  __slots__ = ['cartReachingAccuracyFlyByPoint','orientReachingAccuracyFlyByPoint','cartReachingAccuracyStopPoint','orientReachingAccuracyStopPoint','jointReachingAccuracyStopPoint','defaultEndeffectorVel','defaultJointVel']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cartReachingAccuracyFlyByPoint,orientReachingAccuracyFlyByPoint,cartReachingAccuracyStopPoint,orientReachingAccuracyStopPoint,jointReachingAccuracyStopPoint,defaultEndeffectorVel,defaultJointVel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicTrajInfosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cartReachingAccuracyFlyByPoint is None:
        self.cartReachingAccuracyFlyByPoint = 0.
      if self.orientReachingAccuracyFlyByPoint is None:
        self.orientReachingAccuracyFlyByPoint = 0.
      if self.cartReachingAccuracyStopPoint is None:
        self.cartReachingAccuracyStopPoint = 0.
      if self.orientReachingAccuracyStopPoint is None:
        self.orientReachingAccuracyStopPoint = 0.
      if self.jointReachingAccuracyStopPoint is None:
        self.jointReachingAccuracyStopPoint = 0.
      if self.defaultEndeffectorVel is None:
        self.defaultEndeffectorVel = 0.
      if self.defaultJointVel is None:
        self.defaultJointVel = 0.
    else:
      self.cartReachingAccuracyFlyByPoint = 0.
      self.orientReachingAccuracyFlyByPoint = 0.
      self.cartReachingAccuracyStopPoint = 0.
      self.orientReachingAccuracyStopPoint = 0.
      self.jointReachingAccuracyStopPoint = 0.
      self.defaultEndeffectorVel = 0.
      self.defaultJointVel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.cartReachingAccuracyFlyByPoint, _x.orientReachingAccuracyFlyByPoint, _x.cartReachingAccuracyStopPoint, _x.orientReachingAccuracyStopPoint, _x.jointReachingAccuracyStopPoint, _x.defaultEndeffectorVel, _x.defaultJointVel))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.cartReachingAccuracyFlyByPoint, _x.orientReachingAccuracyFlyByPoint, _x.cartReachingAccuracyStopPoint, _x.orientReachingAccuracyStopPoint, _x.jointReachingAccuracyStopPoint, _x.defaultEndeffectorVel, _x.defaultJointVel,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.cartReachingAccuracyFlyByPoint, _x.orientReachingAccuracyFlyByPoint, _x.cartReachingAccuracyStopPoint, _x.orientReachingAccuracyStopPoint, _x.jointReachingAccuracyStopPoint, _x.defaultEndeffectorVel, _x.defaultJointVel))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.cartReachingAccuracyFlyByPoint, _x.orientReachingAccuracyFlyByPoint, _x.cartReachingAccuracyStopPoint, _x.orientReachingAccuracyStopPoint, _x.jointReachingAccuracyStopPoint, _x.defaultEndeffectorVel, _x.defaultJointVel,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
class BasicTrajInfos(object):
  _type          = 'core_communication_srvs/BasicTrajInfos'
  _md5sum = '4135fcce14a6de812c59d2a8b8b566a0'
  _request_class  = BasicTrajInfosRequest
  _response_class = BasicTrajInfosResponse

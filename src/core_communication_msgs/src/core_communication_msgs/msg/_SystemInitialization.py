"""autogenerated by genpy from core_communication_msgs/SystemInitialization.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SystemInitialization(genpy.Message):
  _md5sum = "a3c6a470858a3bb79e22a56d01662182"
  _type = "core_communication_msgs/SystemInitialization"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool connect_disconnect_robot
bool shutdown_system
bool connect_over_ethercat
bool value
string comment
"""
  __slots__ = ['connect_disconnect_robot','shutdown_system','connect_over_ethercat','value','comment']
  _slot_types = ['bool','bool','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       connect_disconnect_robot,shutdown_system,connect_over_ethercat,value,comment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemInitialization, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.connect_disconnect_robot is None:
        self.connect_disconnect_robot = False
      if self.shutdown_system is None:
        self.shutdown_system = False
      if self.connect_over_ethercat is None:
        self.connect_over_ethercat = False
      if self.value is None:
        self.value = False
      if self.comment is None:
        self.comment = ''
    else:
      self.connect_disconnect_robot = False
      self.shutdown_system = False
      self.connect_over_ethercat = False
      self.value = False
      self.comment = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.connect_disconnect_robot, _x.shutdown_system, _x.connect_over_ethercat, _x.value))
      _x = self.comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.connect_disconnect_robot, _x.shutdown_system, _x.connect_over_ethercat, _x.value,) = _struct_4B.unpack(str[start:end])
      self.connect_disconnect_robot = bool(self.connect_disconnect_robot)
      self.shutdown_system = bool(self.shutdown_system)
      self.connect_over_ethercat = bool(self.connect_over_ethercat)
      self.value = bool(self.value)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment = str[start:end].decode('utf-8')
      else:
        self.comment = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.connect_disconnect_robot, _x.shutdown_system, _x.connect_over_ethercat, _x.value))
      _x = self.comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.connect_disconnect_robot, _x.shutdown_system, _x.connect_over_ethercat, _x.value,) = _struct_4B.unpack(str[start:end])
      self.connect_disconnect_robot = bool(self.connect_disconnect_robot)
      self.shutdown_system = bool(self.shutdown_system)
      self.connect_over_ethercat = bool(self.connect_over_ethercat)
      self.value = bool(self.value)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment = str[start:end].decode('utf-8')
      else:
        self.comment = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")

"""autogenerated by genpy from core_communication_msgs/BioRobControlState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import core_communication_msgs.msg
import std_msgs.msg

class BioRobControlState(genpy.Message):
  _md5sum = "cebeda6703b00559ecb169b5b73a56a5"
  _type = "core_communication_msgs/BioRobControlState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
float64[] control_signal_voltages
float64[] control_signal_torques
float64[] joint_position_error
float64[] joint_velocity_error
float64 cartesian_position_error
float64 cartesian_orientation_error
float64 cartesian_position_error_next_way_point
float64 cartesian_orientation_error_next_way_point
ControlError[] errors

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: core_communication_msgs/ControlError
string name
string description
float64[] values

"""
  __slots__ = ['header','control_signal_voltages','control_signal_torques','joint_position_error','joint_velocity_error','cartesian_position_error','cartesian_orientation_error','cartesian_position_error_next_way_point','cartesian_orientation_error_next_way_point','errors']
  _slot_types = ['std_msgs/Header','float64[]','float64[]','float64[]','float64[]','float64','float64','float64','float64','core_communication_msgs/ControlError[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,control_signal_voltages,control_signal_torques,joint_position_error,joint_velocity_error,cartesian_position_error,cartesian_orientation_error,cartesian_position_error_next_way_point,cartesian_orientation_error_next_way_point,errors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BioRobControlState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control_signal_voltages is None:
        self.control_signal_voltages = []
      if self.control_signal_torques is None:
        self.control_signal_torques = []
      if self.joint_position_error is None:
        self.joint_position_error = []
      if self.joint_velocity_error is None:
        self.joint_velocity_error = []
      if self.cartesian_position_error is None:
        self.cartesian_position_error = 0.
      if self.cartesian_orientation_error is None:
        self.cartesian_orientation_error = 0.
      if self.cartesian_position_error_next_way_point is None:
        self.cartesian_position_error_next_way_point = 0.
      if self.cartesian_orientation_error_next_way_point is None:
        self.cartesian_orientation_error_next_way_point = 0.
      if self.errors is None:
        self.errors = []
    else:
      self.header = std_msgs.msg.Header()
      self.control_signal_voltages = []
      self.control_signal_torques = []
      self.joint_position_error = []
      self.joint_velocity_error = []
      self.cartesian_position_error = 0.
      self.cartesian_orientation_error = 0.
      self.cartesian_position_error_next_way_point = 0.
      self.cartesian_orientation_error_next_way_point = 0.
      self.errors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.control_signal_voltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.control_signal_voltages))
      length = len(self.control_signal_torques)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.control_signal_torques))
      length = len(self.joint_position_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_position_error))
      length = len(self.joint_velocity_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_velocity_error))
      _x = self
      buff.write(_struct_4d.pack(_x.cartesian_position_error, _x.cartesian_orientation_error, _x.cartesian_position_error_next_way_point, _x.cartesian_orientation_error_next_way_point))
      length = len(self.errors)
      buff.write(_struct_I.pack(length))
      for val1 in self.errors:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.values))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.errors is None:
        self.errors = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.control_signal_voltages = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.control_signal_torques = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_position_error = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_velocity_error = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.cartesian_position_error, _x.cartesian_orientation_error, _x.cartesian_position_error_next_way_point, _x.cartesian_orientation_error_next_way_point,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.errors = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.ControlError()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = struct.unpack(pattern, str[start:end])
        self.errors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.control_signal_voltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.control_signal_voltages.tostring())
      length = len(self.control_signal_torques)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.control_signal_torques.tostring())
      length = len(self.joint_position_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_position_error.tostring())
      length = len(self.joint_velocity_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_velocity_error.tostring())
      _x = self
      buff.write(_struct_4d.pack(_x.cartesian_position_error, _x.cartesian_orientation_error, _x.cartesian_position_error_next_way_point, _x.cartesian_orientation_error_next_way_point))
      length = len(self.errors)
      buff.write(_struct_I.pack(length))
      for val1 in self.errors:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.values.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.errors is None:
        self.errors = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.control_signal_voltages = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.control_signal_torques = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_position_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_velocity_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 32
      (_x.cartesian_position_error, _x.cartesian_orientation_error, _x.cartesian_position_error_next_way_point, _x.cartesian_orientation_error_next_way_point,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.errors = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.ControlError()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.errors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")

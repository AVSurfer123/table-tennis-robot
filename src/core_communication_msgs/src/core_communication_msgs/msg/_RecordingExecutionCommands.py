"""autogenerated by genpy from core_communication_msgs/RecordingExecutionCommands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RecordingExecutionCommands(genpy.Message):
  _md5sum = "454a1b04aa982338dd07615b88fe3c3a"
  _type = "core_communication_msgs/RecordingExecutionCommands"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool startRecording
bool stopRecording
bool saveRecording
bool clearRecording
bool successful
string savePath

"""
  __slots__ = ['startRecording','stopRecording','saveRecording','clearRecording','successful','savePath']
  _slot_types = ['bool','bool','bool','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       startRecording,stopRecording,saveRecording,clearRecording,successful,savePath

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecordingExecutionCommands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.startRecording is None:
        self.startRecording = False
      if self.stopRecording is None:
        self.stopRecording = False
      if self.saveRecording is None:
        self.saveRecording = False
      if self.clearRecording is None:
        self.clearRecording = False
      if self.successful is None:
        self.successful = False
      if self.savePath is None:
        self.savePath = ''
    else:
      self.startRecording = False
      self.stopRecording = False
      self.saveRecording = False
      self.clearRecording = False
      self.successful = False
      self.savePath = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.startRecording, _x.stopRecording, _x.saveRecording, _x.clearRecording, _x.successful))
      _x = self.savePath
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.startRecording, _x.stopRecording, _x.saveRecording, _x.clearRecording, _x.successful,) = _struct_5B.unpack(str[start:end])
      self.startRecording = bool(self.startRecording)
      self.stopRecording = bool(self.stopRecording)
      self.saveRecording = bool(self.saveRecording)
      self.clearRecording = bool(self.clearRecording)
      self.successful = bool(self.successful)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.savePath = str[start:end].decode('utf-8')
      else:
        self.savePath = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.startRecording, _x.stopRecording, _x.saveRecording, _x.clearRecording, _x.successful))
      _x = self.savePath
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.startRecording, _x.stopRecording, _x.saveRecording, _x.clearRecording, _x.successful,) = _struct_5B.unpack(str[start:end])
      self.startRecording = bool(self.startRecording)
      self.stopRecording = bool(self.stopRecording)
      self.saveRecording = bool(self.saveRecording)
      self.clearRecording = bool(self.clearRecording)
      self.successful = bool(self.successful)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.savePath = str[start:end].decode('utf-8')
      else:
        self.savePath = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B = struct.Struct("<5B")

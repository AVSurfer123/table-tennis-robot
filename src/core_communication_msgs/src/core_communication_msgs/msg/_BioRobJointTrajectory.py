"""autogenerated by genpy from core_communication_msgs/BioRobJointTrajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import core_communication_msgs.msg
import genpy
import std_msgs.msg

class BioRobJointTrajectory(genpy.Message):
  _md5sum = "8a25a3b29d56336bc432c7aafe44b914"
  _type = "core_communication_msgs/BioRobJointTrajectory"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string[] joint_names
core_communication_msgs/BioRobJointTrajectoryPoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: core_communication_msgs/BioRobJointTrajectoryPoint
trajectory_msgs/JointTrajectoryPoint trajectoryPoint
GripperAction gripperAction
float64 reachingAccuracyCart
float64 reachingAccuracyOrient
float64 reachingAccuracyJoint
float64 controlLoopRatio
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
float64[] positions
float64[] velocities
float64[] accelerations
duration time_from_start
================================================================================
MSG: core_communication_msgs/GripperAction
float64 absolutePosition
bool absPosIsSet
bool closeGripper
float64 noMovementTimeout
bool openGripper
bool useCustomNoMovementTimeout

"""
  __slots__ = ['header','joint_names','points']
  _slot_types = ['std_msgs/Header','string[]','core_communication_msgs/BioRobJointTrajectoryPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,joint_names,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BioRobJointTrajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint_names is None:
        self.joint_names = []
      if self.points is None:
        self.points = []
    else:
      self.header = std_msgs.msg.Header()
      self.joint_names = []
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v1 = val1.trajectoryPoint
        length = len(_v1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.positions))
        length = len(_v1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.velocities))
        length = len(_v1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v1.accelerations))
        _v2 = _v1.time_from_start
        _x = _v2
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v3 = val1.gripperAction
        _x = _v3
        buff.write(_struct_d2Bd2B.pack(_x.absolutePosition, _x.absPosIsSet, _x.closeGripper, _x.noMovementTimeout, _x.openGripper, _x.useCustomNoMovementTimeout))
        _x = val1
        buff.write(_struct_4d.pack(_x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.BioRobJointTrajectoryPoint()
        _v4 = val1.trajectoryPoint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v4.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v4.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v4.accelerations = struct.unpack(pattern, str[start:end])
        _v5 = _v4.time_from_start
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v6 = val1.gripperAction
        _x = _v6
        start = end
        end += 20
        (_x.absolutePosition, _x.absPosIsSet, _x.closeGripper, _x.noMovementTimeout, _x.openGripper, _x.useCustomNoMovementTimeout,) = _struct_d2Bd2B.unpack(str[start:end])
        _v6.absPosIsSet = bool(_v6.absPosIsSet)
        _v6.closeGripper = bool(_v6.closeGripper)
        _v6.openGripper = bool(_v6.openGripper)
        _v6.useCustomNoMovementTimeout = bool(_v6.useCustomNoMovementTimeout)
        _x = val1
        start = end
        end += 32
        (_x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio,) = _struct_4d.unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v7 = val1.trajectoryPoint
        length = len(_v7.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v7.positions.tostring())
        length = len(_v7.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v7.velocities.tostring())
        length = len(_v7.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v7.accelerations.tostring())
        _v8 = _v7.time_from_start
        _x = _v8
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v9 = val1.gripperAction
        _x = _v9
        buff.write(_struct_d2Bd2B.pack(_x.absolutePosition, _x.absPosIsSet, _x.closeGripper, _x.noMovementTimeout, _x.openGripper, _x.useCustomNoMovementTimeout))
        _x = val1
        buff.write(_struct_4d.pack(_x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.BioRobJointTrajectoryPoint()
        _v10 = val1.trajectoryPoint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v10.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v11 = _v10.time_from_start
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        _v12 = val1.gripperAction
        _x = _v12
        start = end
        end += 20
        (_x.absolutePosition, _x.absPosIsSet, _x.closeGripper, _x.noMovementTimeout, _x.openGripper, _x.useCustomNoMovementTimeout,) = _struct_d2Bd2B.unpack(str[start:end])
        _v12.absPosIsSet = bool(_v12.absPosIsSet)
        _v12.closeGripper = bool(_v12.closeGripper)
        _v12.openGripper = bool(_v12.openGripper)
        _v12.useCustomNoMovementTimeout = bool(_v12.useCustomNoMovementTimeout)
        _x = val1
        start = end
        end += 32
        (_x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio,) = _struct_4d.unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3I = struct.Struct("<3I")
_struct_2i = struct.Struct("<2i")
_struct_d2Bd2B = struct.Struct("<d2Bd2B")

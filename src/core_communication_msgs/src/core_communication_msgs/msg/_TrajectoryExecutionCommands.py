"""autogenerated by genpy from core_communication_msgs/TrajectoryExecutionCommands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryExecutionCommands(genpy.Message):
  _md5sum = "2b55c94def99dd4364b97dc409a619b4"
  _type = "core_communication_msgs/TrajectoryExecutionCommands"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool startTrajectory
bool stopTrajectory
bool finishTrajectory
bool pauseTrajectory
bool resumeTrajectory
bool clearTrajectory
bool finishGripperAction

"""
  __slots__ = ['startTrajectory','stopTrajectory','finishTrajectory','pauseTrajectory','resumeTrajectory','clearTrajectory','finishGripperAction']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       startTrajectory,stopTrajectory,finishTrajectory,pauseTrajectory,resumeTrajectory,clearTrajectory,finishGripperAction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryExecutionCommands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.startTrajectory is None:
        self.startTrajectory = False
      if self.stopTrajectory is None:
        self.stopTrajectory = False
      if self.finishTrajectory is None:
        self.finishTrajectory = False
      if self.pauseTrajectory is None:
        self.pauseTrajectory = False
      if self.resumeTrajectory is None:
        self.resumeTrajectory = False
      if self.clearTrajectory is None:
        self.clearTrajectory = False
      if self.finishGripperAction is None:
        self.finishGripperAction = False
    else:
      self.startTrajectory = False
      self.stopTrajectory = False
      self.finishTrajectory = False
      self.pauseTrajectory = False
      self.resumeTrajectory = False
      self.clearTrajectory = False
      self.finishGripperAction = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7B.pack(_x.startTrajectory, _x.stopTrajectory, _x.finishTrajectory, _x.pauseTrajectory, _x.resumeTrajectory, _x.clearTrajectory, _x.finishGripperAction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.startTrajectory, _x.stopTrajectory, _x.finishTrajectory, _x.pauseTrajectory, _x.resumeTrajectory, _x.clearTrajectory, _x.finishGripperAction,) = _struct_7B.unpack(str[start:end])
      self.startTrajectory = bool(self.startTrajectory)
      self.stopTrajectory = bool(self.stopTrajectory)
      self.finishTrajectory = bool(self.finishTrajectory)
      self.pauseTrajectory = bool(self.pauseTrajectory)
      self.resumeTrajectory = bool(self.resumeTrajectory)
      self.clearTrajectory = bool(self.clearTrajectory)
      self.finishGripperAction = bool(self.finishGripperAction)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7B.pack(_x.startTrajectory, _x.stopTrajectory, _x.finishTrajectory, _x.pauseTrajectory, _x.resumeTrajectory, _x.clearTrajectory, _x.finishGripperAction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.startTrajectory, _x.stopTrajectory, _x.finishTrajectory, _x.pauseTrajectory, _x.resumeTrajectory, _x.clearTrajectory, _x.finishGripperAction,) = _struct_7B.unpack(str[start:end])
      self.startTrajectory = bool(self.startTrajectory)
      self.stopTrajectory = bool(self.stopTrajectory)
      self.finishTrajectory = bool(self.finishTrajectory)
      self.pauseTrajectory = bool(self.pauseTrajectory)
      self.resumeTrajectory = bool(self.resumeTrajectory)
      self.clearTrajectory = bool(self.clearTrajectory)
      self.finishGripperAction = bool(self.finishGripperAction)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7B = struct.Struct("<7B")

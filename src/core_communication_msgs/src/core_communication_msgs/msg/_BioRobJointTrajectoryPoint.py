"""autogenerated by genpy from core_communication_msgs/BioRobJointTrajectoryPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import core_communication_msgs.msg
import genpy

class BioRobJointTrajectoryPoint(genpy.Message):
  _md5sum = "98a8e34183deadfd954fa698cebd99d1"
  _type = "core_communication_msgs/BioRobJointTrajectoryPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """trajectory_msgs/JointTrajectoryPoint trajectoryPoint
GripperAction gripperAction
float64 reachingAccuracyCart
float64 reachingAccuracyOrient
float64 reachingAccuracyJoint
float64 controlLoopRatio
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
float64[] positions
float64[] velocities
float64[] accelerations
duration time_from_start
================================================================================
MSG: core_communication_msgs/GripperAction
float64 absolutePosition
bool absPosIsSet
bool closeGripper
float64 noMovementTimeout
bool openGripper
bool useCustomNoMovementTimeout

"""
  __slots__ = ['trajectoryPoint','gripperAction','reachingAccuracyCart','reachingAccuracyOrient','reachingAccuracyJoint','controlLoopRatio']
  _slot_types = ['trajectory_msgs/JointTrajectoryPoint','core_communication_msgs/GripperAction','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectoryPoint,gripperAction,reachingAccuracyCart,reachingAccuracyOrient,reachingAccuracyJoint,controlLoopRatio

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BioRobJointTrajectoryPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectoryPoint is None:
        self.trajectoryPoint = trajectory_msgs.msg.JointTrajectoryPoint()
      if self.gripperAction is None:
        self.gripperAction = core_communication_msgs.msg.GripperAction()
      if self.reachingAccuracyCart is None:
        self.reachingAccuracyCart = 0.
      if self.reachingAccuracyOrient is None:
        self.reachingAccuracyOrient = 0.
      if self.reachingAccuracyJoint is None:
        self.reachingAccuracyJoint = 0.
      if self.controlLoopRatio is None:
        self.controlLoopRatio = 0.
    else:
      self.trajectoryPoint = trajectory_msgs.msg.JointTrajectoryPoint()
      self.gripperAction = core_communication_msgs.msg.GripperAction()
      self.reachingAccuracyCart = 0.
      self.reachingAccuracyOrient = 0.
      self.reachingAccuracyJoint = 0.
      self.controlLoopRatio = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectoryPoint.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectoryPoint.positions))
      length = len(self.trajectoryPoint.velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectoryPoint.velocities))
      length = len(self.trajectoryPoint.accelerations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectoryPoint.accelerations))
      _x = self
      buff.write(_struct_2id2Bd2B4d.pack(_x.trajectoryPoint.time_from_start.secs, _x.trajectoryPoint.time_from_start.nsecs, _x.gripperAction.absolutePosition, _x.gripperAction.absPosIsSet, _x.gripperAction.closeGripper, _x.gripperAction.noMovementTimeout, _x.gripperAction.openGripper, _x.gripperAction.useCustomNoMovementTimeout, _x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectoryPoint is None:
        self.trajectoryPoint = trajectory_msgs.msg.JointTrajectoryPoint()
      if self.gripperAction is None:
        self.gripperAction = core_communication_msgs.msg.GripperAction()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectoryPoint.positions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectoryPoint.velocities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectoryPoint.accelerations = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 60
      (_x.trajectoryPoint.time_from_start.secs, _x.trajectoryPoint.time_from_start.nsecs, _x.gripperAction.absolutePosition, _x.gripperAction.absPosIsSet, _x.gripperAction.closeGripper, _x.gripperAction.noMovementTimeout, _x.gripperAction.openGripper, _x.gripperAction.useCustomNoMovementTimeout, _x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio,) = _struct_2id2Bd2B4d.unpack(str[start:end])
      self.gripperAction.absPosIsSet = bool(self.gripperAction.absPosIsSet)
      self.gripperAction.closeGripper = bool(self.gripperAction.closeGripper)
      self.gripperAction.openGripper = bool(self.gripperAction.openGripper)
      self.gripperAction.useCustomNoMovementTimeout = bool(self.gripperAction.useCustomNoMovementTimeout)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectoryPoint.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectoryPoint.positions.tostring())
      length = len(self.trajectoryPoint.velocities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectoryPoint.velocities.tostring())
      length = len(self.trajectoryPoint.accelerations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectoryPoint.accelerations.tostring())
      _x = self
      buff.write(_struct_2id2Bd2B4d.pack(_x.trajectoryPoint.time_from_start.secs, _x.trajectoryPoint.time_from_start.nsecs, _x.gripperAction.absolutePosition, _x.gripperAction.absPosIsSet, _x.gripperAction.closeGripper, _x.gripperAction.noMovementTimeout, _x.gripperAction.openGripper, _x.gripperAction.useCustomNoMovementTimeout, _x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectoryPoint is None:
        self.trajectoryPoint = trajectory_msgs.msg.JointTrajectoryPoint()
      if self.gripperAction is None:
        self.gripperAction = core_communication_msgs.msg.GripperAction()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectoryPoint.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectoryPoint.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectoryPoint.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 60
      (_x.trajectoryPoint.time_from_start.secs, _x.trajectoryPoint.time_from_start.nsecs, _x.gripperAction.absolutePosition, _x.gripperAction.absPosIsSet, _x.gripperAction.closeGripper, _x.gripperAction.noMovementTimeout, _x.gripperAction.openGripper, _x.gripperAction.useCustomNoMovementTimeout, _x.reachingAccuracyCart, _x.reachingAccuracyOrient, _x.reachingAccuracyJoint, _x.controlLoopRatio,) = _struct_2id2Bd2B4d.unpack(str[start:end])
      self.gripperAction.absPosIsSet = bool(self.gripperAction.absPosIsSet)
      self.gripperAction.closeGripper = bool(self.gripperAction.closeGripper)
      self.gripperAction.openGripper = bool(self.gripperAction.openGripper)
      self.gripperAction.useCustomNoMovementTimeout = bool(self.gripperAction.useCustomNoMovementTimeout)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2id2Bd2B4d = struct.Struct("<2id2Bd2B4d")

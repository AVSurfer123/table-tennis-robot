"""autogenerated by genpy from core_communication_msgs/BeckhoffTerminalDescription.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import core_communication_msgs.msg

class BeckhoffTerminalDescription(genpy.Message):
  _md5sum = "59e7de013f74774a93c0a1dafb1d6c9b"
  _type = "core_communication_msgs/BeckhoffTerminalDescription"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string terminal # terminal type
uint32 position # relative position of the terminal in the EtherCAT bus (0-n)
uint8 num_ports # number of ports on the terminal (0-n)
BeckhoffPortDescription[] ports # port descriptions

================================================================================
MSG: core_communication_msgs/BeckhoffPortDescription
uint8 index
string direction # 'in','out'
string type # 'digital';'analog'
string data_type # 'uint8' 'uint16' 'uint32' 'uint64'

"""
  __slots__ = ['terminal','position','num_ports','ports']
  _slot_types = ['string','uint32','uint8','core_communication_msgs/BeckhoffPortDescription[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       terminal,position,num_ports,ports

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BeckhoffTerminalDescription, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.terminal is None:
        self.terminal = ''
      if self.position is None:
        self.position = 0
      if self.num_ports is None:
        self.num_ports = 0
      if self.ports is None:
        self.ports = []
    else:
      self.terminal = ''
      self.position = 0
      self.num_ports = 0
      self.ports = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.terminal
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_IB.pack(_x.position, _x.num_ports))
      length = len(self.ports)
      buff.write(_struct_I.pack(length))
      for val1 in self.ports:
        buff.write(_struct_B.pack(val1.index))
        _x = val1.direction
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.data_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ports is None:
        self.ports = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.terminal = str[start:end].decode('utf-8')
      else:
        self.terminal = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.position, _x.num_ports,) = _struct_IB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ports = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.BeckhoffPortDescription()
        start = end
        end += 1
        (val1.index,) = _struct_B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.direction = str[start:end].decode('utf-8')
        else:
          val1.direction = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data_type = str[start:end].decode('utf-8')
        else:
          val1.data_type = str[start:end]
        self.ports.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.terminal
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_IB.pack(_x.position, _x.num_ports))
      length = len(self.ports)
      buff.write(_struct_I.pack(length))
      for val1 in self.ports:
        buff.write(_struct_B.pack(val1.index))
        _x = val1.direction
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.data_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ports is None:
        self.ports = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.terminal = str[start:end].decode('utf-8')
      else:
        self.terminal = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.position, _x.num_ports,) = _struct_IB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ports = []
      for i in range(0, length):
        val1 = core_communication_msgs.msg.BeckhoffPortDescription()
        start = end
        end += 1
        (val1.index,) = _struct_B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.direction = str[start:end].decode('utf-8')
        else:
          val1.direction = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data_type = str[start:end].decode('utf-8')
        else:
          val1.data_type = str[start:end]
        self.ports.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_IB = struct.Struct("<IB")

"""autogenerated by genpy from core_communication_msgs/ProcessExecutionCommands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ProcessExecutionCommands(genpy.Message):
  _md5sum = "366f8279ab1970f7c58efde097543c71"
  _type = "core_communication_msgs/ProcessExecutionCommands"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool repeat
string process
bool proceed_when_gui_inactive
bool pause_process
bool resume_process
bool start_process
bool stop_process

"""
  __slots__ = ['repeat','process','proceed_when_gui_inactive','pause_process','resume_process','start_process','stop_process']
  _slot_types = ['bool','string','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       repeat,process,proceed_when_gui_inactive,pause_process,resume_process,start_process,stop_process

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProcessExecutionCommands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.repeat is None:
        self.repeat = False
      if self.process is None:
        self.process = ''
      if self.proceed_when_gui_inactive is None:
        self.proceed_when_gui_inactive = False
      if self.pause_process is None:
        self.pause_process = False
      if self.resume_process is None:
        self.resume_process = False
      if self.start_process is None:
        self.start_process = False
      if self.stop_process is None:
        self.stop_process = False
    else:
      self.repeat = False
      self.process = ''
      self.proceed_when_gui_inactive = False
      self.pause_process = False
      self.resume_process = False
      self.start_process = False
      self.stop_process = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.repeat))
      _x = self.process
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5B.pack(_x.proceed_when_gui_inactive, _x.pause_process, _x.resume_process, _x.start_process, _x.stop_process))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.repeat,) = _struct_B.unpack(str[start:end])
      self.repeat = bool(self.repeat)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.process = str[start:end].decode('utf-8')
      else:
        self.process = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.proceed_when_gui_inactive, _x.pause_process, _x.resume_process, _x.start_process, _x.stop_process,) = _struct_5B.unpack(str[start:end])
      self.proceed_when_gui_inactive = bool(self.proceed_when_gui_inactive)
      self.pause_process = bool(self.pause_process)
      self.resume_process = bool(self.resume_process)
      self.start_process = bool(self.start_process)
      self.stop_process = bool(self.stop_process)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.repeat))
      _x = self.process
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5B.pack(_x.proceed_when_gui_inactive, _x.pause_process, _x.resume_process, _x.start_process, _x.stop_process))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.repeat,) = _struct_B.unpack(str[start:end])
      self.repeat = bool(self.repeat)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.process = str[start:end].decode('utf-8')
      else:
        self.process = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.proceed_when_gui_inactive, _x.pause_process, _x.resume_process, _x.start_process, _x.stop_process,) = _struct_5B.unpack(str[start:end])
      self.proceed_when_gui_inactive = bool(self.proceed_when_gui_inactive)
      self.pause_process = bool(self.pause_process)
      self.resume_process = bool(self.resume_process)
      self.start_process = bool(self.start_process)
      self.stop_process = bool(self.stop_process)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_5B = struct.Struct("<5B")
